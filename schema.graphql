# ===== Canopy Vault Entities =====

"""
Represents a Canopy vault instance
"""
type Vault @entity {
  # Vault object ID (from VaultCreated event)
  id: ID!

  # Timestamp when the vault was created (unix seconds)
  createdAt: BigInt! @index

  # Fungible asset metadata object ID for vault shares
  sharesMetadata: String! @index

  # Transaction version where this vault was created
  createdAtVersion: BigInt! @index

  # Relationships
  storeBalances: [StoreBalance!]! @derivedFrom(field: "vault")
  stakingBalances: [StakingBalance!]! @derivedFrom(field: "vault")
}

"""
Global statistics for Canopy vaults
"""
type VaultStats @entity {
  # Singleton ID (always "global")
  id: ID!

  # Total number of vaults created
  totalVaultCount: Int!

  # Last update timestamp (unix seconds)
  lastUpdateTime: BigInt!
}

# ===== Fungible Asset Entities =====

"""
Cache for fungible_store metadata lookups to avoid repeated view calls
"""
type StoreMetadataCache @entity {
  # Store address
  id: ID!

  # Fungible asset metadata address
  metadata: String! @index

  # Whether this fungible_store's metadata corresponds to a Canopy vault
  isCanopyVault: Boolean! @index

  # Reference to the Canopy vault (if it is a canopy vault)
  vault: Vault
}

"""
Tracks balance for a specific vault-fungible_store combination
"""
type StoreBalance @entity {
  # Store address
  id: ID!

  # The fungible store address
  fungible_store: String! @index

  # The vault this fungible_store holds shares for
  vault: Vault!

  # Current balance in the fungible_store
  lastKnownBalance: BigInt!

  # Last time the balance was observed (unix seconds)
  lastObservationTime: BigInt! @index

  # Cumulative balance * seconds up to lastObservationTime
  cumulativeBalanceSeconds: BigInt!

  # Total number of snapshots created for this store
  totalSnapshotCount: Int!

  # Relationships
  balanceSnapshots: [BalanceSnapshot!]! @derivedFrom(field: "storeBalance")
  transactions: [Transaction!]! @derivedFrom(field: "storeBalance")
}

"""
Balance snapshot with ~24 hour lifetime for historical tracking
"""
type BalanceSnapshot @entity {
  # Composite ID: {storeBalanceId}-{snapshotCount}
  id: ID!

  # Reference to the vault-fungible_store balance
  storeBalance: StoreBalance!

  # Timestamp when this snapshot was first created (unix seconds)
  filledAt: BigInt! @index

  # last balance in this snapshot period
  balance: BigInt!

  # Cumulative balance * seconds up to lastUpdateTime
  cumulativeBalanceSeconds: BigInt!

  # Last update time within this snapshot period (unix seconds)
  lastUpdateTime: BigInt!
}

"""
Individual deposit or withdrawal transaction
"""
type Transaction @entity {
  # Composite ID: {transactionVersion}-{eventIndex}
  id: ID!

  # Reference to the vault-fungible_store balance this affects
  storeBalance: StoreBalance!

  # Transaction signer address
  signer: String! @index

  # Timestamp when this transaction occurred (unix seconds)
  timestamp: BigInt! @index

  # Type of transaction
  type: TransactionType! @index

  # Amount of tokens deposited or withdrawn
  amount: BigInt!

  # Transaction version for ordering
  transactionVersion: BigInt! @index

  # Event index within the transaction
  eventIndex: Int!
}

"""
Transaction type enumeration
"""
enum TransactionType {
  DEPOSIT
  WITHDRAW
}

"""
Global statistics for fungible asset processing
"""
type FungibleAssetStats @entity {
  # Singleton ID (always "global")
  id: ID!

  # Total number of deposits processed
  totalDepositCount: Int!

  # Total number of withdrawals processed
  totalWithdrawCount: Int!

  # Number of unique stores tracked
  uniqueStoreCount: Int!

  # Number of stores with Canopy vault shares
  canopyVaultStoreCount: Int!

  # Last update timestamp (unix seconds)
  lastUpdateTime: BigInt!
}

# ===== Multi-Rewards Staking Entities =====

"""
Represents a user in the staking system
"""
type User @entity {
  # User address
  id: ID!

  # Timestamp when user first interacted with the system (unix seconds)
  firstSeenAt: BigInt! @index

  # Relationships
  stakingBalances: [StakingBalance!]! @derivedFrom(field: "user")
  stakingTransactions: [StakingTransaction!]! @derivedFrom(field: "user")
}

"""
Tracks staking balance for a specific user-vault combination
"""
type StakingBalance @entity {
  # Composite ID: {userAddress}-{tokenMetadataAddress}
  id: ID!

  # The user who owns this staking position
  user: User!

  # The staking token metadata address
  stakingToken: String! @index

  # The vault this staking position is for (always set since we only track Canopy vault shares)
  vault: Vault!

  # TODO: consider adding a field for the primary fungible store address(though maybe unnecessary if it's precomputable?)

  # Current staked balance
  lastKnownBalance: BigInt!

  # Last time the balance was observed (unix seconds)
  lastObservationTime: BigInt! @index

  # Cumulative balance * seconds up to lastObservationTime
  cumulativeBalanceSeconds: BigInt!

  # Total number of snapshots created for this staking position
  totalSnapshotCount: Int!

  # Relationships
  stakingSnapshots: [StakingSnapshot!]! @derivedFrom(field: "stakingBalance")
  stakingTransactions: [StakingTransaction!]! @derivedFrom(field: "stakingBalance")
}

"""
Staking balance snapshot with ~24 hour lifetime for historical tracking
"""
type StakingSnapshot @entity {
  # Composite ID: {stakingBalanceId}-{snapshotCount}
  id: ID!

  # Reference to the user-vault staking balance
  stakingBalance: StakingBalance!

  # Timestamp when this snapshot was first created (unix seconds)
  filledAt: BigInt! @index

  # last balance in this snapshot period
  balance: BigInt!

  # Cumulative balance * seconds up to lastUpdateTime
  cumulativeBalanceSeconds: BigInt!

  # Last update time within this snapshot period (unix seconds)
  lastUpdateTime: BigInt!
}

"""
Individual stake or unstake transaction
"""
type StakingTransaction @entity {
  # Composite ID: {transactionVersion}-{eventIndex}
  id: ID!

  # Reference to the user-vault staking balance this affects
  stakingBalance: StakingBalance!

  # Reference to the user for easier querying
  user: User!

  # Timestamp when this transaction occurred (unix seconds)
  timestamp: BigInt! @index

  # Type of staking transaction
  type: StakingTransactionType! @index

  # Amount of tokens staked or unstaked
  amount: BigInt!

  # Transaction version for ordering
  transactionVersion: BigInt! @index

  # Event index within the transaction
  eventIndex: Int!
}

"""
Staking transaction type enumeration
"""
enum StakingTransactionType {
  STAKE
  UNSTAKE
}

"""
Global statistics for staking processing
"""
type StakingStats @entity {
  # Singleton ID (always "global")
  id: ID!

  # Total number of stake events processed
  totalStakeCount: Int!

  # Total number of unstake events processed
  totalUnstakeCount: Int!

  # Number of unique users who have staked
  uniqueUserCount: Int!

  # Number of users with Canopy vault staking positions
  canopyVaultStakerCount: Int!

  # Last update timestamp (unix seconds)
  lastUpdateTime: BigInt!
}
